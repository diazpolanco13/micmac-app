import React, { useState, useEffect, useMemo } from 'react';
import { LineChart, Line, ScatterChart, Scatter, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine, Cell, BarChart, Bar, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from 'recharts';
import { Camera, Download, RefreshCw, Settings, Info, ChevronRight, ChevronLeft, Plus, Minus, Grid, BarChart3, TrendingUp, Target, Layers, Activity, Eye, EyeOff, Save, Upload, FileText, Share2, Filter, Maximize2, Moon, Sun } from 'lucide-react';

const MICMACProfessional = () => {
  // Estados principales
  const [numVariables, setNumVariables] = useState(5);
  const [variableNames, setVariableNames] = useState(['ESC1', 'ESC2', 'ESC3', 'ESC4', 'ESC5']);
  const [variableDescriptions, setVariableDescriptions] = useState([
    'Invasión Militar',
    'Cuarentena Naval',
    'Operación Quirúrgica',
    'Operación Psicológica',
    'Ataque Falsa Bandera'
  ]);
  const [matrix, setMatrix] = useState([
    [0, 1, 3, 1, 3],
    [3, 0, 3, 2, 1],
    [2, 3, 0, 1, 3],
    [3, 1, 3, 0, 3],
    [3, 3, 3, 2, 0]
  ]);
  
  // Estados de UI
  const [activeTab, setActiveTab] = useState('analysis');
  const [showGrid, setShowGrid] = useState(true);
  const [showLabels, setShowLabels] = useState(true);
  const [animateChart, setAnimateChart] = useState(true);
  const [darkMode, setDarkMode] = useState(false);
  const [selectedVariable, setSelectedVariable] = useState(null);
  const [zoomLevel, setZoomLevel] = useState(1);
  const [showIndirectAnalysis, setShowIndirectAnalysis] = useState(false);
  
  // Cálculos MICMAC
  const calculations = useMemo(() => {
    const influence = [];
    const dependence = [];
    
    // Calcular influencia (suma de filas sin diagonal)
    for (let i = 0; i < numVariables; i++) {
      let sum = 0;
      for (let j = 0; j < numVariables; j++) {
        if (i !== j) {
          sum += matrix[i][j] || 0;
        }
      }
      influence.push(sum);
    }
    
    // Calcular dependencia (suma de columnas sin diagonal)
    for (let j = 0; j < numVariables; j++) {
      let sum = 0;
      for (let i = 0; i < numVariables; i++) {
        if (i !== j) {
          sum += matrix[i][j] || 0;
        }
      }
      dependence.push(sum);
    }
    
    // Calcular medias
    const avgInfluence = influence.reduce((a, b) => a + b, 0) / numVariables;
    const avgDependence = dependence.reduce((a, b) => a + b, 0) / numVariables;
    
    // Clasificar variables
    const classification = [];
    for (let i = 0; i < numVariables; i++) {
      let type, color, quadrant;
      const inf = influence[i];
      const dep = dependence[i];
      
      if (inf > avgInfluence && dep > avgDependence) {
        type = 'Enlace';
        color = '#f59e0b';
        quadrant = 'I';
      } else if (inf > avgInfluence && dep <= avgDependence) {
        type = 'Motriz';
        color = '#ef4444';
        quadrant = 'II';
      } else if (inf <= avgInfluence && dep > avgDependence) {
        type = 'Dependiente';
        color = '#3b82f6';
        quadrant = 'IV';
      } else {
        type = 'Autónoma';
        color = '#10b981';
        quadrant = 'III';
      }
      
      classification.push({
        id: i,
        name: variableNames[i],
        description: variableDescriptions[i],
        influence: inf,
        dependence: dep,
        type,
        color,
        quadrant,
        x: dep,
        y: inf
      });
    }
    
    // Estadísticas adicionales
    const totalRelations = influence.reduce((a, b) => a + b, 0);
    const maxPossible = numVariables * (numVariables - 1) * 3;
    const density = ((totalRelations / maxPossible) * 100).toFixed(1);
    const connectivity = matrix.flat().filter(v => v > 0).length / (numVariables * numVariables - numVariables) * 100;
    
    const linkVariables = classification.filter(v => v.type === 'Enlace').length;
    const stability = ((linkVariables / numVariables) * 100).toFixed(1);
    
    return {
      influence,
      dependence,
      avgInfluence,
      avgDependence,
      classification,
      density,
      connectivity: connectivity.toFixed(1),
      stability,
      totalRelations
    };
  }, [matrix, numVariables, variableNames, variableDescriptions]);
  
  // Manejadores
  const updateMatrixValue = (i, j, value) => {
    const newMatrix = [...matrix];
    const val = parseInt(value) || 0;
    newMatrix[i][j] = Math.max(0, Math.min(3, val));
    setMatrix(newMatrix);
  };
  
  const resetMatrix = () => {
    const newMatrix = Array(numVariables).fill().map(() => Array(numVariables).fill(0));
    setMatrix(newMatrix);
  };
  
  const loadExample = () => {
    setNumVariables(5);
    setVariableNames(['ESC1', 'ESC2', 'ESC3', 'ESC4', 'ESC5']);
    setVariableDescriptions([
      'Invasión Militar',
      'Cuarentena Naval',
      'Operación Quirúrgica',
      'Operación Psicológica',
      'Ataque Falsa Bandera'
    ]);
    setMatrix([
      [0, 1, 3, 1, 3],
      [3, 0, 3, 2, 1],
      [2, 3, 0, 1, 3],
      [3, 1, 3, 0, 3],
      [3, 3, 3, 2, 0]
    ]);
  };
  
  const exportData = () => {
    const data = {
      variables: variableNames,
      descriptions: variableDescriptions,
      matrix,
      calculations: calculations.classification
    };
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'micmac-analysis.json';
    a.click();
  };
  
  // Componente de gráfico de dispersión mejorado
  const ScatterPlot = () => {
    const maxValue = Math.max(
      Math.max(...calculations.influence),
      Math.max(...calculations.dependence)
    ) + 2;
    
    return (
      <div className="relative">
        <ResponsiveContainer width="100%" height={500}>
          <ScatterChart
            margin={{ top: 20, right: 20, bottom: 60, left: 60 }}
          >
            <CartesianGrid 
              strokeDasharray="3 3" 
              stroke={darkMode ? '#374151' : '#e5e7eb'}
              strokeOpacity={0.5}
            />
            <XAxis
              type="number"
              dataKey="x"
              name="Dependencia"
              domain={[0, maxValue]}
              label={{ 
                value: 'DEPENDENCIA →', 
                position: 'insideBottom', 
                offset: -10,
                style: { 
                  fill: darkMode ? '#9ca3af' : '#4b5563',
                  fontWeight: 600 
                }
              }}
              tick={{ fill: darkMode ? '#9ca3af' : '#6b7280' }}
            />
            <YAxis
              type="number"
              dataKey="y"
              name="Influencia"
              domain={[0, maxValue]}
              label={{ 
                value: '← INFLUENCIA', 
                angle: -90, 
                position: 'insideLeft',
                style: { 
                  fill: darkMode ? '#9ca3af' : '#4b5563',
                  fontWeight: 600 
                }
              }}
              tick={{ fill: darkMode ? '#9ca3af' : '#6b7280' }}
            />
            <Tooltip
              cursor={{ strokeDasharray: '3 3' }}
              content={({ active, payload }) => {
                if (active && payload && payload[0]) {
                  const data = payload[0].payload;
                  return (
                    <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} p-3 rounded-lg shadow-lg border`}>
                      <p className="font-semibold text-sm">{data.name}: {data.description}</p>
                      <p className="text-xs mt-1">Influencia: {data.influence}</p>
                      <p className="text-xs">Dependencia: {data.dependence}</p>
                      <p className="text-xs mt-1">
                        <span 
                          className="px-2 py-1 rounded text-white text-xs"
                          style={{ backgroundColor: data.color }}
                        >
                          {data.type}
                        </span>
                      </p>
                    </div>
                  );
                }
                return null;
              }}
            />
            <ReferenceLine 
              x={calculations.avgDependence} 
              stroke="#ef4444" 
              strokeDasharray="5 5"
              strokeWidth={2}
              opacity={0.7}
            />
            <ReferenceLine 
              y={calculations.avgInfluence} 
              stroke="#ef4444" 
              strokeDasharray="5 5"
              strokeWidth={2}
              opacity={0.7}
            />
            <Scatter
              name="Variables"
              data={calculations.classification}
              fill="#8884d8"
            >
              {calculations.classification.map((entry, index) => (
                <Cell 
                  key={`cell-${index}`} 
                  fill={entry.color}
                  stroke={selectedVariable === index ? '#000' : 'none'}
                  strokeWidth={selectedVariable === index ? 3 : 0}
                />
              ))}
            </Scatter>
          </ScatterChart>
        </ResponsiveContainer>
        
        {/* Etiquetas de cuadrantes */}
        <div className="absolute top-8 left-20 text-xs font-semibold opacity-30 uppercase tracking-wider">
          II - Motrices
        </div>
        <div className="absolute top-8 right-8 text-xs font-semibold opacity-30 uppercase tracking-wider">
          I - Enlace
        </div>
        <div className="absolute bottom-20 left-20 text-xs font-semibold opacity-30 uppercase tracking-wider">
          III - Autónomas
        </div>
        <div className="absolute bottom-20 right-8 text-xs font-semibold opacity-30 uppercase tracking-wider">
          IV - Dependientes
        </div>
      </div>
    );
  };
  
  // Render principal
  return (
    <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50'}`}>
      {/* Header */}
      <header className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} shadow-lg border-b`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <div className="p-2 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-lg">
                <Grid className="h-6 w-6 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent">
                  MICMAC Professional
                </h1>
                <p className="text-sm text-gray-500">Análisis de Impactos Cruzados</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <button
                onClick={loadExample}
                className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors flex items-center gap-2"
              >
                <Upload className="h-4 w-4" />
                Cargar Ejemplo
              </button>
              <button
                onClick={exportData}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2"
              >
                <Download className="h-4 w-4" />
                Exportar
              </button>
              <button
                onClick={() => setDarkMode(!darkMode)}
                className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
              >
                {darkMode ? <Sun className="h-5 w-5" /> : <Moon className="h-5 w-5" />}
              </button>
            </div>
          </div>
        </div>
      </header>
      
      {/* Tabs */}
      <div className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white'} shadow-sm border-b`}>
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex space-x-8">
            {[
              { id: 'analysis', label: 'Análisis', icon: BarChart3 },
              { id: 'matrix', label: 'Matriz', icon: Grid },
              { id: 'details', label: 'Detalles', icon: FileText },
              { id: 'advanced', label: 'Avanzado', icon: Settings }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-2 border-b-2 font-medium text-sm flex items-center gap-2 transition-colors ${
                  activeTab === tab.id
                    ? 'border-indigo-500 text-indigo-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                }`}
              >
                <tab.icon className="h-4 w-4" />
                {tab.label}
              </button>
            ))}
          </div>
        </div>
      </div>
      
      {/* Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'analysis' && (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Gráfico principal */}
            <div className={`lg:col-span-2 ${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-bold">Plano de Influencias y Dependencias</h2>
                <div className="flex gap-2">
                  <button
                    onClick={() => setZoomLevel(zoomLevel * 1.1)}
                    className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
                  >
                    <Plus className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => setZoomLevel(zoomLevel * 0.9)}
                    className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
                  >
                    <Minus className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => setZoomLevel(1)}
                    className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors"
                  >
                    <Maximize2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
              
              <div style={{ transform: `scale(${zoomLevel})`, transformOrigin: 'top left' }}>
                <ScatterPlot />
              </div>
              
              {/* Leyenda */}
              <div className="grid grid-cols-4 gap-2 mt-4">
                {[
                  { type: 'Motriz', color: 'bg-red-500', desc: 'Alta influencia, Baja dependencia' },
                  { type: 'Enlace', color: 'bg-amber-500', desc: 'Alta influencia, Alta dependencia' },
                  { type: 'Dependiente', color: 'bg-blue-500', desc: 'Baja influencia, Alta dependencia' },
                  { type: 'Autónoma', color: 'bg-green-500', desc: 'Baja influencia, Baja dependencia' }
                ].map(item => (
                  <div key={item.type} className="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700">
                    <div className={`w-4 h-4 ${item.color} rounded`}></div>
                    <div>
                      <p className="text-xs font-semibold">{item.type}</p>
                      <p className="text-xs text-gray-500">{item.desc}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Panel lateral */}
            <div className="space-y-6">
              {/* Estadísticas */}
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
                <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
                  <Activity className="h-5 w-5 text-indigo-600" />
                  Estadísticas
                </h3>
                <div className="space-y-3">
                  <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <span className="text-sm font-medium">Densidad</span>
                    <span className="text-lg font-bold text-indigo-600">{calculations.density}%</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <span className="text-sm font-medium">Conectividad</span>
                    <span className="text-lg font-bold text-green-600">{calculations.connectivity}%</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <span className="text-sm font-medium">Estabilidad</span>
                    <span className="text-lg font-bold text-amber-600">{calculations.stability}%</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <span className="text-sm font-medium">Variables</span>
                    <span className="text-lg font-bold">{numVariables}</span>
                  </div>
                  <div className="flex justify-between items-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <span className="text-sm font-medium">Relaciones</span>
                    <span className="text-lg font-bold">{calculations.totalRelations}</span>
                  </div>
                </div>
              </div>
              
              {/* Ranking */}
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
                <h3 className="text-lg font-bold mb-4 flex items-center gap-2">
                  <TrendingUp className="h-5 w-5 text-indigo-600" />
                  Ranking de Variables
                </h3>
                <div className="space-y-2">
                  {calculations.classification
                    .sort((a, b) => (b.influence + b.dependence) - (a.influence + a.dependence))
                    .map((variable, index) => (
                      <div
                        key={variable.id}
                        onClick={() => setSelectedVariable(variable.id)}
                        className={`p-3 rounded-lg cursor-pointer transition-all ${
                          selectedVariable === variable.id 
                            ? 'ring-2 ring-indigo-500' 
                            : 'hover:bg-gray-50 dark:hover:bg-gray-700'
                        }`}
                      >
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <span className="text-lg font-bold text-gray-400">#{index + 1}</span>
                            <div
                              className="w-3 h-3 rounded-full"
                              style={{ backgroundColor: variable.color }}
                            />
                            <span className="font-medium">{variable.name}</span>
                          </div>
                          <span className="text-xs px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-700">
                            {variable.type}
                          </span>
                        </div>
                        <div className="mt-1 text-xs text-gray-500">
                          Inf: {variable.influence} | Dep: {variable.dependence}
                        </div>
                      </div>
                    ))}
                </div>
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'matrix' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-xl font-bold">Matriz de Influencias Directas</h2>
              <div className="flex gap-2">
                <button
                  onClick={resetMatrix}
                  className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2"
                >
                  <RefreshCw className="h-4 w-4" />
                  Limpiar
                </button>
              </div>
            </div>
            
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr>
                    <th className="p-2 text-left"></th>
                    {variableNames.map((name, i) => (
                      <th key={i} className="p-2 text-center font-medium">
                        {name}
                      </th>
                    ))}
                    <th className="p-2 text-center font-bold text-indigo-600">Influencia</th>
                  </tr>
                </thead>
                <tbody>
                  {variableNames.map((name, i) => (
                    <tr key={i} className="border-t">
                      <td className="p-2 font-medium">{name}</td>
                      {Array.from({ length: numVariables }).map((_, j) => (
                        <td key={j} className="p-2">
                          {i === j ? (
                            <div className="w-12 h-10 bg-gray-100 dark:bg-gray-700 rounded flex items-center justify-center text-gray-400">
                              -
                            </div>
                          ) : (
                            <input
                              type="number"
                              min="0"
                              max="3"
                              value={matrix[i][j]}
                              onChange={(e) => updateMatrixValue(i, j, e.target.value)}
                              className={`w-12 h-10 text-center rounded border-2 transition-all ${
                                matrix[i][j] === 0 
                                  ? 'border-gray-200 bg-gray-50' 
                                  : matrix[i][j] === 1 
                                  ? 'border-yellow-300 bg-yellow-50'
                                  : matrix[i][j] === 2
                                  ? 'border-orange-300 bg-orange-50'
                                  : 'border-red-300 bg-red-50'
                              } focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500`}
                            />
                          )}
                        </td>
                      ))}
                      <td className="p-2 text-center font-bold text-indigo-600">
                        {calculations.influence[i]}
                      </td>
                    </tr>
                  ))}
                  <tr className="border-t-2 border-gray-300">
                    <td className="p-2 font-bold text-indigo-600">Dependencia</td>
                    {calculations.dependence.map((dep, i) => (
                      <td key={i} className="p-2 text-center font-bold text-indigo-600">
                        {dep}
                      </td>
                    ))}
                    <td></td>
                  </tr>
                </tbody>
              </table>
            </div>
            
            {/* Escala de colores */}
            <div className="mt-6 flex items-center justify-center gap-4">
              <span className="text-sm font-medium">Escala:</span>
              {[
                { value: 0, label: 'Sin influencia', color: 'bg-gray-100' },
                { value: 1, label: 'Débil', color: 'bg-yellow-100' },
                { value: 2, label: 'Media', color: 'bg-orange-100' },
                { value: 3, label: 'Fuerte', color: 'bg-red-100' }
              ].map(item => (
                <div key={item.value} className="flex items-center gap-2">
                  <div className={`w-8 h-8 ${item.color} rounded border-2 border-gray-300 flex items-center justify-center font-bold`}>
                    {item.value}
                  </div>
                  <span className="text-sm">{item.label}</span>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {activeTab === 'details' && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Lista detallada de variables */}
            <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
              <h2 className="text-xl font-bold mb-4">Análisis Detallado por Variable</h2>
              <div className="space-y-4">
                {calculations.classification.map(variable => (
                  <div
                    key={variable.id}
                    className={`p-4 rounded-lg border-2 transition-all ${
                      selectedVariable === variable.id 
                        ? 'border-indigo-500 bg-indigo-50 dark:bg-indigo-900/20' 
                        : 'border-gray-200 dark:border-gray-700'
                    }`}
                  >
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center gap-2 mb-2">
                          <div
                            className="w-4 h-4 rounded-full"
                            style={{ backgroundColor: variable.color }}
                          />
                          <h3 className="font-bold text-lg">{variable.name}</h3>
                          <span
                            className="px-2 py-1 rounded-full text-xs text-white font-medium"
                            style={{ backgroundColor: variable.color }}
                          >
                            {variable.type}
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-400 mb-3">
                          {variable.description}
                        </p>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <p className="text-xs text-gray-500 uppercase tracking-wide">Influencia</p>
                            <p className="text-2xl font-bold text-indigo-600">{variable.influence}</p>
                            <div className="mt-1 h-2 bg-gray-200 rounded-full overflow-hidden">
                              <div
                                className="h-full bg-indigo-600 transition-all duration-500"
                                style={{ width: `${(variable.influence / Math.max(...calculations.influence)) * 100}%` }}
                              />
                            </div>
                          </div>
                          <div>
                            <p className="text-xs text-gray-500 uppercase tracking-wide">Dependencia</p>
                            <p className="text-2xl font-bold text-purple-600">{variable.dependence}</p>
                            <div className="mt-1 h-2 bg-gray-200 rounded-full overflow-hidden">
                              <div
                                className="h-full bg-purple-600 transition-all duration-500"
                                style={{ width: `${(variable.dependence / Math.max(...calculations.dependence)) * 100}%` }}
                              />
                            </div>
                          </div>
                        </div>
                        <div className="mt-3 pt-3 border-t dark:border-gray-700">
                          <p className="text-xs text-gray-500">
                            Coordenadas: ({variable.dependence}, {variable.influence}) | Cuadrante: {variable.quadrant}
                          </p>
                        </div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
            
            {/* Gráficos adicionales */}
            <div className="space-y-6">
              {/* Gráfico de barras comparativo */}
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
                <h3 className="text-lg font-bold mb-4">Comparación de Influencia vs Dependencia</h3>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={calculations.classification}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="influence" fill="#6366f1" name="Influencia" />
                    <Bar dataKey="dependence" fill="#8b5cf6" name="Dependencia" />
                  </BarChart>
                </ResponsiveContainer>
              </div>
              
              {/* Distribución por tipo */}
              <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
                <h3 className="text-lg font-bold mb-4">Distribución por Tipo</h3>
                <div className="grid grid-cols-2 gap-4">
                  {Object.entries(
                    calculations.classification.reduce((acc, v) => {
                      acc[v.type] = (acc[v.type] || 0) + 1;
                      return acc;
                    }, {})
                  ).map(([type, count]) => {
                    const color = type === 'Motriz' ? 'bg-red-500' :
                                 type === 'Enlace' ? 'bg-amber-500' :
                                 type === 'Dependiente' ? 'bg-blue-500' : 'bg-green-500';
                    return (
                      <div key={type} className="text-center p-4 rounded-lg bg-gray-50 dark:bg-gray-700">
                        <div className={`w-16 h-16 ${color} rounded-full mx-auto mb-2 flex items-center justify-center text-white text-2xl font-bold`}>
                          {count}
                        </div>
                        <p className="font-medium">{type}</p>
                        <p className="text-xs text-gray-500">{((count / numVariables) * 100).toFixed(0)}%</p>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}
        
        {activeTab === 'advanced' && (
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow-lg p-6`}>
            <h2 className="text-xl font-bold mb-6">Configuración Avanzada</h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Configuración de variables */}
              <div>
                <h3 className="font-semibold mb-4">Variables del Sistema</h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium mb-1">Número de Variables</label>
                    <select
                      value={numVariables}
                      onChange={(e) => {
                        const num = parseInt(e.target.value);
                        setNumVariables(num);
                        const newNames = Array(num).fill().map((_, i) => `VAR${i + 1}`);
                        const newDescs = Array(num).fill().map((_, i) => `Variable ${i + 1}`);
                        const newMatrix = Array(num).fill().map(() => Array(num).fill(0));
                        setVariableNames(newNames);
                        setVariableDescriptions(newDescs);
                        setMatrix(newMatrix);
                      }}
                      className="w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500"
                    >
                      {[3, 4, 5, 6, 7, 8, 9, 10].map(n => (
                        <option key={n} value={n}>{n} variables</option>
                      ))}
                    </select>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">Nombres y Descripciones</label>
                    <div className="space-y-2 max-h-64 overflow-y-auto">
                      {variableNames.map((name, i) => (
                        <div key={i} className="flex gap-2">
                          <input
                            type="text"
                            value={name}
                            onChange={(e) => {
                              const newNames = [...variableNames];
                              newNames[i] = e.target.value;
                              setVariableNames(newNames);
                            }}
                            className="w-24 px-2 py-1 border rounded focus:ring-2 focus:ring-indigo-500"
                            placeholder="Nombre"
                          />
                          <input
                            type="text"
                            value={variableDescriptions[i]}
                            onChange={(e) => {
                              const newDescs = [...variableDescriptions];
                              newDescs[i] = e.target.value;
                              setVariableDescriptions(newDescs);
                            }}
                            className="flex-1 px-2 py-1 border rounded focus:ring-2 focus:ring-indigo-500"
                            placeholder="Descripción"
                          />
                        </div>
                      ))}
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Opciones de visualización */}
              <div>
                <h3 className="font-semibold mb-4">Opciones de Visualización</h3>
                <div className="space-y-3">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={showGrid}
                      onChange={(e) => setShowGrid(e.target.checked)}
                      className="rounded text-indigo-600 focus:ring-indigo-500"
                    />
                    <span>Mostrar cuadrícula</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={showLabels}
                      onChange={(e) => setShowLabels(e.target.checked)}
                      className="rounded text-indigo-600 focus:ring-indigo-500"
                    />
                    <span>Mostrar etiquetas</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={animateChart}
                      onChange={(e) => setAnimateChart(e.target.checked)}
                      className="rounded text-indigo-600 focus:ring-indigo-500"
                    />
                    <span>Animaciones</span>
                  </label>
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={showIndirectAnalysis}
                      onChange={(e) => setShowIndirectAnalysis(e.target.checked)}
                      className="rounded text-indigo-600 focus:ring-indigo-500"
                    />
                    <span>Análisis de influencias indirectas (Beta)</span>
                  </label>
                </div>
                
                {showIndirectAnalysis && (
                  <div className="mt-4 p-4 bg-amber-50 dark:bg-amber-900/20 rounded-lg">
                    <p className="text-sm text-amber-800 dark:text-amber-200">
                      <strong>Nota:</strong> El análisis de influencias indirectas calcula las relaciones 
                      ocultas elevando la matriz a potencias sucesivas. Esta función está en desarrollo.
                    </p>
                  </div>
                )}
              </div>
            </div>
            
            {/* Información del método */}
            <div className="mt-8 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg">
              <h3 className="font-semibold mb-2 flex items-center gap-2">
                <Info className="h-5 w-5 text-blue-600" />
                Acerca del Método MICMAC
              </h3>
              <p className="text-sm text-gray-600 dark:text-gray-400">
                El método MICMAC (Matriz de Impactos Cruzados - Multiplicación Aplicada a una Clasificación) 
                fue desarrollado por Michel Godet en 1971. Es una herramienta de análisis estructural que 
                permite identificar las variables clave de un sistema mediante el estudio de sus relaciones 
                de influencia y dependencia.
              </p>
              <div className="mt-3 grid grid-cols-2 gap-4 text-sm">
                <div>
                  <strong>Fórmulas principales:</strong>
                  <ul className="mt-1 space-y-1 text-xs">
                    <li>• Influencia = Σ(fila) excluyendo diagonal</li>
                    <li>• Dependencia = Σ(columna) excluyendo diagonal</li>
                    <li>• Valores: 0 (nula), 1 (débil), 2 (media), 3 (fuerte)</li>
                  </ul>
                </div>
                <div>
                  <strong>Clasificación de variables:</strong>
                  <ul className="mt-1 space-y-1 text-xs">
                    <li>• Motrices: Alta influencia, baja dependencia</li>
                    <li>• Enlace: Alta influencia, alta dependencia</li>
                    <li>• Dependientes: Baja influencia, alta dependencia</li>
                    <li>• Autónomas: Baja influencia, baja dependencia</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default MICMACProfessional;